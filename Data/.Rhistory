output$table <- renderTable({
data.frame(x=data())
})
})
ui =shinyUI(pageWithSidebar(
# Application title
headerPanel("Tabsets"),
# Sidebar with controls to select the random distribution type
# and number of observations to generate. Note the use of the br()
# element to introduce extra vertical spacing
sidebarPanel(
radioButtons("dist", "Distribution type:",
list("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
br(),
sliderInput("n",
"Number of observations:",
value = 500,
min = 1,
max = 1000)
),
# Show a tabset that includes a plot, summary, and table view
# of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot"),div(id="linkToSummary",tags$a("This is a link to Summary Tab")) ),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"),HTML("<script>$('#linkToSummary').click(function() {
tabs = $('.tabbable .nav.nav-tabs li')
tabs.each(function() {
$(this).removeClass('active')
})
$(tabs[1]).addClass('active')
tabsContents = $('.tabbable .tab-content .tab-pane')
tabsContents.each(function() {
$(this).removeClass('active')
})
$(tabsContents[1]).addClass('active')
$('#summary').trigger('change').trigger('shown');
})</script>
")	)
)
)
))
runApp(list(ui=ui, server=server))
ui <- fluidPage(
tags$head(tags$script("
window.onload = function() {
$('#mynavlist a:contains(\"Data Check\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Dry Run\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Output\")').parent().addClass('disabled');
};
Shiny.addCustomMessageHandler('activeNavs', function(nav_label) {
$('#mynavlist a:contains(\"' + nav_label + '\")').parent().removeClass('disabled');
});
")),
titlePanel("New Project"),
navlistPanel(selected="Data Upload", id='mynavlist',
tabPanel("Data Upload",
textInput("aInSummary", label = h5("Please type a"),
value = "Enter value..."),
br(),
actionButton('data_upload_done', 'Done')
),
tabPanel("Data Check",
textInput("bInDataCheck", label = h5("Please type b"),
value = "Enter value..."),
br(),
actionButton('data_check_done', 'Done')
),
tabPanel("Dry Run",
textInput("cInDryRun", label = h5("Please type c"),
value = "Enter value..."),
br(),
actionButton('dry_run_done', 'Done')
),
tabPanel("Output"),
"-----",
tabPanel("Help-FAQ")
)
)
server <- function(input, output,session) {
observe({
if (input$data_upload_done > 0) {
session$sendCustomMessage('activeNavs', 'Data Check')
}
})
observe({
if (input$data_check_done > 0) {
session$sendCustomMessage('activeNavs', 'Dry Run')
}
})
observe({
if (input$dry_run_done > 0) {
session$sendCustomMessage('activeNavs', 'Output')
}
})
}
runApp(list(ui=ui, server=server))
ui <- fluidPage(
tags$head(tags$script("
window.onload = function() {
$('#mynavlist a:contains(\"Data Check\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Dry Run\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Output\")').parent().addClass('disabled');
};
Shiny.addCustomMessageHandler('activeNavs', function(nav_label) {
$('#mynavlist a:contains(\"' + nav_label + '\")').parent().removeClass('disabled');
});
")),
titlePanel("New Project"),
navlistPanel(selected="Data Upload", id='mynavlist',
tabPanel("Data Upload",
textInput("aInSummary", label = h5("Please type a"),
value = "Enter value..."),
br(),
actionButton('data_upload_done', 'Done')
),
tabPanel("Data Check",
textInput("bInDataCheck", label = h5("Please type b"),
value = "Enter value..."),
br(),
actionButton('data_check_done', 'Done')
),
tabPanel("Dry Run",
textInput("cInDryRun", label = h5("Please type c"),
value = "Enter value..."),
br(),
actionButton('dry_run_done', 'Done')
),
tabPanel("Output"),
"-----",
tabPanel("Help-FAQ")
)
)
server <- function(input, output,session) {
observe({
if (input$data_upload_done > 0) {
session$sendCustomMessage('activeNavs', 'Data Check')
}
})
observe({
if (input$data_upload_done %% 2 == 0 ) {
updateTabsetPanel(session, "mynavlist", selected = "Data Upload")
} else {
updateTabsetPanel(session, "mynavlist", selected = "Data Check")
}
})
observe({
if (input$data_check_done > 0) {
session$sendCustomMessage('activeNavs', 'Dry Run')
}
})
observe({
if (input$dry_run_done > 0) {
session$sendCustomMessage('activeNavs', 'Output')
}
})
}
runApp(list(ui=ui, server=server))
ui <- fluidPage(
tags$head(tags$script("
window.onload = function() {
$('#mynavlist a:contains(\"Data Check\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Dry Run\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Output\")').parent().addClass('disabled');
};
Shiny.addCustomMessageHandler('activeNavs', function(nav_label) {
$('#mynavlist a:contains(\"' + nav_label + '\")').parent().removeClass('disabled');
});
")),
titlePanel("New Project"),
navlistPanel(selected="Data Upload", id='mynavlist',
tabPanel("Data Upload",
textInput("aInSummary", label = h5("Please type a"),
value = "Enter value..."),
br(),
actionButton('data_upload_done', 'Done')
),
tabPanel("Data Check",
textInput("bInDataCheck", label = h5("Please type b"),
value = "Enter value..."),
br(),
actionButton('data_check_done', 'Done')
),
tabPanel("Dry Run",
textInput("cInDryRun", label = h5("Please type c"),
value = "Enter value..."),
br(),
actionButton('dry_run_done', 'Done')
),
tabPanel("Output"),
"-----",
tabPanel("Help-FAQ")
)
)
server <- function(input, output,session) {
observe({
if (input$data_upload_done > 0) {
session$sendCustomMessage('activeNavs', 'Data Check')
}
})
observe({
if (input$data_upload_done %% 2 == 0 ) {
updateTabsetPanel(session, "mynavlist", selected = "Data Upload")
} else {
updateTabsetPanel(session, "mynavlist", selected = "Data Check")
}
})
observe({
if (input$data_check_done > 0) {
session$sendCustomMessage('activeNavs', 'Dry Run')
}
})
observe({
if (input$dry_run_done > 0) {
session$sendCustomMessage('activeNavs', 'Output')
}
})
}
runApp(list(ui=ui, server=server))
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
ui <- fluidPage(
tags$head(tags$script("
window.onload = function() {
$('#mynavlist a:contains(\"Data Check\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Dry Run\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Output\")').parent().addClass('disabled');
};
Shiny.addCustomMessageHandler('activeNavs', function(nav_label) {
$('#mynavlist a:contains(\"' + nav_label + '\")').parent().removeClass('disabled');
});
")),
titlePanel("New Project"),
navlistPanel(selected="Data Upload", id='mynavlist',
tabPanel("Data Upload",
textInput("aInSummary", label = h5("Please type a"),
value = "Enter value..."),
br(),
actionButton('data_upload_done', 'Done')
),
tabPanel("Data Check",
textInput("bInDataCheck", label = h5("Please type b"),
value = "Enter value..."),
br(),
actionButton('data_check_done', 'Done')
),
tabPanel("Dry Run",
textInput("cInDryRun", label = h5("Please type c"),
value = "Enter value..."),
br(),
actionButton('dry_run_done', 'Done')
),
tabPanel("Output"),
"-----",
tabPanel("Help-FAQ")
)
)
server <- function(input, output,session) {
observe({
if (input$data_upload_done > 0) {
session$sendCustomMessage('activeNavs', 'Data Check')
}
})
observe({
if (input$data_upload_done %% 2 == 0 ) {
updateTabsetPanel(session, "mynavlist", selected = "Data Upload")
} else {
updateTabsetPanel(session, "mynavlist", selected = "Data Check")
}
})
observe({
if (input$data_check_done > 0) {
session$sendCustomMessage('activeNavs', 'Dry Run')
}
})
observe({
if (input$dry_run_done > 0) {
session$sendCustomMessage('activeNavs', 'Output')
}
})
}
runApp(list(ui=ui, server=server))
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
ui <- fluidPage(
tags$head(tags$script("
window.onload = function() {
$('#mynavlist a:contains(\"Data Check\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Dry Run\")').parent().addClass('disabled');
$('#mynavlist a:contains(\"Output\")').parent().addClass('disabled');
};
Shiny.addCustomMessageHandler('activeNavs', function(nav_label) {
$('#mynavlist a:contains(\"' + nav_label + '\")').parent().removeClass('disabled');
});
")),
titlePanel("New Project"),
navlistPanel(selected="Data Upload", id='mynavlist',
tabPanel("Data Upload",
textInput("aInSummary", label = h5("Please type a"),
value = "Enter value..."),
br(),
actionButton('data_upload_done', 'Done')
),
tabPanel("Data Check",
textInput("bInDataCheck", label = h5("Please type b"),
value = "Enter value..."),
br(),
actionButton('data_check_done', 'Done')
),
tabPanel("Dry Run",
textInput("cInDryRun", label = h5("Please type c"),
value = "Enter value..."),
br(),
actionButton('dry_run_done', 'Done')
),
tabPanel("Output"),
"-----",
tabPanel("Help-FAQ")
)
)
server <- function(input, output,session) {
observe({
if (input$data_upload_done > 0) {
session$sendCustomMessage('activeNavs', 'Data Check')
}
})
observe({
if (input$data_upload_done %% 2 == 0 ) {
updateTabsetPanel(session, "mynavlist", selected = "Data Upload")
} else {
updateTabsetPanel(session, "mynavlist", selected = "Data Check")
}
})
observe({
if (input$data_check_done > 0) {
session$sendCustomMessage('activeNavs', 'Dry Run')
}
})
observe({
if (input$dry_run_done > 0) {
session$sendCustomMessage('activeNavs', 'Output')
}
})
}
runApp(list(ui=ui, server=server))
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
library("css/test.css")
source("css/test.css")
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
suaElementNames
shiny::runApp('shinyFBS')
library(shiny)
library(data.table)
library(reshape2)
library(rhandsontable)
library(shinysky)
source('R/makeWideSuaDataTables.R')
data <- fread("Data/testData.csv")
data <- data[, .(geographicAreaM49, geographicArea, measuredItemCPC, Item,
measuredElement, Element, timePointYears, Year, Value, Status, Method)]
dataSUA <- data[, .(geographicArea, timePointYears, Item, Element, Value)]
## Create list with SUA Elements Trade Missing!!!
elementsSua <- c("Production [t]", "Seed [t]", "Loss [t]",  "Waste [t]", "Feed [t]", "Processed [t]", "Other Util [t]",
"Stocks [#]")
suaLong <- dataSUA[dataSUA$Element %in% elementsSua,]
## Convert data into wide format for SUA format: Prod Imp ... . Problem: there are duplicate elements (to examine further)
## Couldn't find the duplicate elements. Also, the data is incomplete. I started working with a subset of only one country
sua <- dcast.data.table(suaLong, geographicArea + timePointYears + Item ~ Element, value.var="Value")
suaElementNames <- c("Production", "Import", "Export", "Stocks", "Food Use", "Feed Use","Seed", "Food Losses & Waste",
"Tourist Consumption", "Industrial Use", "Residual Other Uses")
suaElementCodes = c(5510, 5610, 5910, 5071, 5141, 5520, 5525, 5015, 5164, 5165, 5166)
suaElementTable = data.table(measuredElement = suaElementCodes, Element = suaElementNames)
for(i in suaElementTable[, measuredElement]) {
assign(paste(suaElementTable[measuredElement == i, Element]), makeWideSuaDataTables()$returnSuaTable)
assign(paste(suaElementTable[measuredElement == i, Element], "RowNames", sep =""), makeWideSuaDataTables()$returnRowNames)
}
get(suaElementNames[11])
suaElementNames
get(suaElementNames[9])
str(get(suaElementNames[9]))
str(get(suaElementNames[1]))
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
suaElementNames
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shinysky::run.shinysky.example()
?actionButton
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
makeCompilationPage = function(x){
tabpanel(paste(x),
fluidrow(column(4, h3(textOutput(paste(x)))),
column(2, actionButton(paste("est", x, sep =""), "Estimate Data ", align = 'center', styleclass="primary", block=T)),
column(2, actionButton(paste("upload", x, sep =""), "Upload File", styleclass="warning",block =T)),
column(2, actionButton(paste("visualize", x, sep =""), "Visualize", styleclass="danger",block =T)),
column(2, actionButton(paste("save", x, sep =""), "Save Production Data", styleclass="success",block =T))
),
tags$style(type='text/css', "#productionEst { width:100%; margin-top: 15px; margin-bottom: 15px;}"),
tags$style(type='text/css', "#upload { width:100%; margin-top: 15px; margin-bottom: 15px;}"),
tags$style(type='text/css', "#visualize { width:100%; margin-top: 15px; margin-bottom: 15px;}"),
tags$style(type='text/css', "#productionSave { width:100%; margin-top: 15px; margin-bottom: 15px;}"),
rHandsontableOutput(paste("table", x, sep =""))
),
}
makeCompilationPage = function(x){
tabpanel(paste(x),
fluidrow(column(4, h3(textOutput(paste(x)))),
column(2, actionButton(paste("est", x, sep =""), "Estimate Data ", align = 'center', styleclass="primary", block=T)),
column(2, actionButton(paste("upload", x, sep =""), "Upload File", styleclass="warning",block =T)),
column(2, actionButton(paste("visualize", x, sep =""), "Visualize", styleclass="danger",block =T)),
column(2, actionButton(paste("save", x, sep =""), "Save Production Data", styleclass="success",block =T))
),
tags$style(type='text/css', "#productionEst { width:100%; margin-top: 15px; margin-bottom: 15px;}"),
tags$style(type='text/css', "#upload { width:100%; margin-top: 15px; margin-bottom: 15px;}"),
tags$style(type='text/css', "#visualize { width:100%; margin-top: 15px; margin-bottom: 15px;}"),
tags$style(type='text/css', "#productionSave { width:100%; margin-top: 15px; margin-bottom: 15px;}"),
rHandsontableOutput(paste("table", x, sep =""))
)
}
shiny::runApp('testApp4')
shiny::runApp('testApp4')
shiny::runApp('testApp4')
shiny::runApp('testApp4')
shiny::runApp('testApp4')
shiny::runApp('shinyFBS')
source('~/shinyFBS/R/makeWideSuaDataTables.R')
wideSuaTable = dcast.data.table(data[measuredElement == i & geographicArea == input$FBSSUAarea, ],
)
shiny::runApp('shinyFBS')
test = fread("Data/data.csv")
test = fread("/home/bernhard/shinyFBS/Data/data.csv")
str(test)
test2 = test[geographicArea %in% c("Australia", "Austria"),]
str(test2)
data.table(test2)
write.csv(test2, "testDataMultipleArea.csv", row.names = F)
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
data <- fread("Data/testDataMultipleArea.csv")
setwd("/home/bernhard/shinyFBS/Data")
data <- fread("testDataMultipleArea.csv")
data
data <- read.csv("testDataMultipleArea.csv")
data
data <- data.table(read.csv("testDataMultipleArea.csv"))
data
data <- data[, .(geographicAreaM49, geographicArea, measuredItemCPC, Item,
measuredElement, Element, timePointYears, Year, Value, Status, Method)]
data
dataSUA <- data[, .(geographicArea, timePointYears, Item, Element, Value)]
## Create list with SUA Elements Trade Missing!!!
elementsSua <- c("Production [t]", "Seed [t]", "Loss [t]",  "Waste [t]", "Feed [t]", "Processed [t]", "Other Util [t]",
"Stocks [#]")
suaLong <- dataSUA[dataSUA$Element %in% elementsSua,]
## Convert data into wide format for SUA format: Prod Imp ... . Problem: there are duplicate elements (to examine further)
## Couldn't find the duplicate elements. Also, the data is incomplete. I started working with a subset of only one country
sua <- dcast.data.table(suaLong, geographicArea + timePointYears + Item ~ Element, value.var="Value")
suaLong <- dataSUA[dataSUA$Element %in% elementsSua,]
## Convert data into wide format for SUA format: Prod Imp ... . Problem: there are duplicate elements (to examine further)
## Couldn't find the duplicate elements. Also, the data is incomplete. I started working with a subset of only one country
sua <- dcast.data.table(suaLong, geographicArea + timePointYears + Item ~ Element, value.var="Value")
dataSUA <- data[, .(geographicArea, timePointYears, Item, Element, Value)]
dataSUA
data <- read.csv("testDataMultipleArea.csv")
data <- read.csv("testDataMultipleArea.csv")
str(data)
shiny::runApp('~/shinyFBS')
data <- fread("Data/testData.csv")
data <- fread("testData.csv")
shiny::runApp('~/shinyFBS')
wideSuaTable = dcast.data.table(data[measuredElement == i, ],
)
source('~/shinyFBS/R/makeWideSuaDataTables.R')
shiny::runApp('~/shinyFBS')
